generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid()) @db.Uuid
  email       String       @unique @db.VarChar(255)
  password    String       @db.VarChar(255)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  workspaces  Workspace[]
  userProfile UserProfile?
  userAccount UserAccount?
  userSession UserSession?
}

model Workspace {
  id          String     @id @default(uuid()) @db.Uuid
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.Uuid
  teams       Team[]
  properties  Property[]
}

model Team {
  id          String       @id @default(uuid()) @db.Uuid
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  workspace   Workspace    @relation(fields: [workspaceId], references: [id])
  workspaceId String       @db.Uuid
  teamMembers TeamMember[]
}

model Property {
  id                 String            @id @default(cuid()) @db.Uuid
  title              String
  propertyType       String
  bedrooms           Int
  baze               Int
  price              Float?
  description        String?
  mthrooms           Int
  propertySiainImage UploadedFile[]
  siainImageId       String
  location           Location          @relation(fields: [locationId], references: [id])
  locationId         String            @unique @db.Uuid
  constructionYear   Int?
  isFurnished        Boolean           @default(false)
  isAvailable        Boolean           @default(true)
  propertyAnalysis   PropertyAnalysis?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  workspace          Workspace         @relation(fields: [workspaceId], references: [id])
  workspaceId        String            @db.Uuid
}

model UserProfile {
  id                   String         @id @default(cuid()) @db.Uuid
  firstName            String
  lastName             String
  bio                  String?
  userPhotoId          String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  user                 User           @relation(fields: [userId], references: [id])
  userId               String         @unique @db.Uuid
  userLocation         Location[]
  userLocationId       String         @db.Uuid
  userProfileUserPhoto UploadedFile[]
}

model UserAccount {
  id        String   @id @default(cuid()) @db.Uuid
  type      String   @default("FREE")
  purchase  Float?   @default(0)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.Uuid
}

model UserSession {
  id        String    @id @default(cuid()) @db.Uuid
  token     String    @unique
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique @db.Uuid
}

model TeamMember {
  id        String   @id @default(cuid()) @db.Uuid
  Id        String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String    @db.Uuid
}

model Location {
  id            String       @id @default(cuid()) @db.Uuid
  latitude      Float
  longitude     Float
  address       String
  city          String
  country       String
  postalCode    String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId String       @unique @db.Uuid
  property      Property?
}

model PropertyAnalysis {
  id                 String   @id @default(cuid()) @db.Uuid
  title              String
  description        String?
  rentalIncome       Float?
  netIncome          Float?
  returnOnInvestment Float?
  purchasePrice      Float?
  rehabAmount        Float?
  salesCommission    Float?
  additionalCosts    Float?
  annualCosts        Float?
  mortgageAmount     Float?
  mortgageInterest   Float?
  mortgageCosts      Float?
  taxes              Float?
  registrationFees   Float?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  property           Property @relation(fields: [propertyId], references: [id])
  propertyId         String   @unique @db.Uuid
}

model UploadedFile {
  id                   String        @id @default(cuid()) @db.Uuid
  name                 String
  type                 String
  url                  String
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  userProfileUserPhoto UserProfile[]
  userPhotoId          String?       @unique @db.Uuid
  propertySiainImage   Property[]
  siainImageId         String?       @unique @db.Uuid
}

enum TeamMemberRole {
  NONE
  VIEW
  ALL
}

enum PropertyType {
  HOUSE
  FLAT
  APARTMENT
  TOWNHOUSE
  VILLA
  PENTHOUSE
  STUDIO
  LOFT
  DUPLEX
  TRIPLEX
  BUNGALOW
  OFFICE
  RETAIL
  WAREHOUSE
  INDUSTRIAL
  LAND
  FARM
  HOTEL
  HOSTEL
  MOBILE_HOME
  BOAT_HOUSE
}
